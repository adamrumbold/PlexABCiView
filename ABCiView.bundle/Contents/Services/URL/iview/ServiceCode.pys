# getSeries: http://iview.abc.net.au/api/legacy/flash/?series=$ID
# getAllSeries: http://iview.abc.net.au/api/legacy/flash/?series=all

def MetadataObjectForURL(url):
    
    #TODO get normalised url
    RE_PLAYLIST = Regex('([0-9]+)$', Regex.DOTALL)
    ID = RE_PLAYLIST.search(url).group(0)
    data = JSON.ObjectFromURL('http://iview.abc.net.au/api/legacy/flash/?series='+ID)
    
    for result in data:
        Log('Checking for ID:' + str(ID) + ' and got ' + str(result['a']) )
        Log('matched ID so getting episodes data')
        episodes = result['f']
        show = result['b']
        RE_EPISODE = Regex('^'+show+' (.*)$')
    
        for episode in episodes:
            if episode['a'] == ID:
                title = RE_EPISODE.search(episode['b']).group(1)
                summary = episode['d']
                thumb = episode['s']
                duration = int(episode['j'])*1000
                content_rating = episode['m']
                try:
                    season = int(episode['u'])
                except:
                    season = None
                
                try:
                    absolute_index = int(episode['v'])
                except:
                    absolute_index = None
                expires_on = episode['g']
                aired = Datetime.ParseDate(episode['f'])
                summary = summary + '\n\nExpires: ' + expires_on       
            
                return EpisodeObject(
                    title=title,
                    summary=summary,
                    thumb=thumb,
                    duration=duration,
                    show = show,
                    season = season,
                    absolute_index = absolute_index,
                    originally_available_at = aired
                )
    
def MediaObjectsForURL(url):
    
    container = Container.MP4
    video_codec = VideoCodec.H264
    audio_codec = AudioCodec.AAC
    audio_channels = 2

    return [
        MediaObject(
            protocol='rtmp',
            video_resolution='576',
            audio_channels=2,
            parts=[PartObject(key=Callback(PlayVideo, url=url))],
        ),
    ]

@indirect
def PlayVideo(url):
    BASE_URL = 'http://www.abc.net.au/iview/'
    CFG_URL = BASE_URL + 'xml/config.xml'
    CFG_XML = XML.ElementFromURL(CFG_URL)
    AUTH_URL = CFG_XML.xpath('/config/param[@name="auth"]')[0].get("value")
    FALLBACK_PATH = 'rtmp://cp53909.edgefcs.net/ondemand'
    xml = XML.ElementFromURL(url=AUTH_URL) 
    token = xml.xpath('//a:token/text()', namespaces={'a': 'http://www.abc.net.au/iView/Services/iViewHandshaker'})[0]
    server = xml.xpath('//a:server/text()', namespaces={'a': 'http://www.abc.net.au/iView/Services/iViewHandshaker'})[0]
    
    if 'http' in server:
        rtmpURL = FALLBACK_PATH + '?auth=' + token
    else:
        rtmpURL = server + '?auth=' + token
    
    RE_ID = Regex('([0-9]+)$', Regex.DOTALL)
    ID = RE_ID.search(url).group(0)
    #TODO: handle if URL is of different format (ie .scrape page and get same share liknk)
    API_URL = CFG_XML.xpath('/config/param[@name="api"]')[0].get("value")
    
    #API returns series even if querying with episode ID
    data = JSON.ObjectFromURL(API_URL + 'series=' + str(ID))
    
    for results in data:
        episodes = results['f']
        for episode in episodes:
            if episode['a'] == ID:
                live = 0
                if 'n' in episode:
                    video_url = episode['n'][:-4]
                else:
                    video_url = episode['r']
                    live = 1
                
                SWF_URL = 'http://www.abc.net.au/iview/images/iview.jpg'
                CLIP = 'mp4:flash/playback/_definst_/'
                if live == 1:
                    rtmpVid = RTMPVideoURL(url=rtmpURL, clip=video_url, swf_url=SWF_URL, live=True)
                else:
                    rtmpVid = RTMPVideoURL(url=rtmpURL, clip=CLIP + video_url, swf_url=SWF_URL)
            
                return IndirectResponse(VideoClipObject, key=rtmpVid)